<div class="jumbotron bg-success">
	<div class="container-fluid">
		<div class="row">
			<div class="col-md-8">
				<h1>Character Tracker</h1>
				<p>A simple character tracker</p>
			</div>
			<div class="col-md-4">
				<ul class="list-group">
					<li class="list-group-item">Backbone.js - Routing, MVC</li>
					<li class="list-group-item">Require.js - Dependency Management</li>
					<li class="list-group-item">React, text (require.js) - Templates</li>
					<li class="list-group-item">Also featuring - Bootstrap, Lodash, jQuery</li>
				</ul>
			</div>
		</div>
	</div>
</div>

<div class="container-fluid">
	<div class="row">

		<!-- character list react component -->
		<div id="characterListContainer" class="col-md-8"></div>

		<div class="col-md-4">

			<!-- character creater react component -->
			<div id="characterCreaterContainer"></div>

		</div>
	</div>
	<div class="row">
		<div class="col-sm-12">
			<blockquote>
				<p>I tell you that this station <em>will</em> be operational as planned.</p>
				<footer>Commander Jerjerrod to Lord Vader</footer>
			</blockquote>
			<div id="comments"></div>
		</div>
	</div>
</div>

<!-- character viewer react component -->
<div id="characterViewerContainer"></div>

<!-- the entrypoint for the react application -->
<script type="text/javascript" src="/js/vendor/require.js" data-main="/js/react-app.js"></script>

<!--
<script type="text/javascript" src="/js/vendor/react.js"></script>
<script type="text/javascript" src="/js/vendor/JSXTransformer.js"></script>
<script type="text/javascript" src="/js/vendor/jquery-2.1.1.js"></script>
<script type="text/jsx">

	/** @jsx React.DOM */

	var CommentBox = React.createClass({
		loadCommentsFromServer: function () {
			$.ajax({
				context: this,
				url: this.props.url,
				dataType: 'json',
				success: function (response) {
					if (response.success) {
						this.setState({ data: response.comments });
					} else {
						alert('error');
						console.log(response.err);
					}
				},
				error: function (xhr, status, err) {
					console.error(this.props.url, status, err.toString());
				}
 			});
		},
		handleCommentSubmit: function (comment) {
			$.ajax({
				context: this,
				url: this.props.url,
				dataType: 'json',
				type: 'POST',
				data: comment,
				success: function(data) {
					this.setState({ data: data });
				},
				error: function (xhr, status, err) {
					console.error(this.props.url, status, err.toString());
				}
			});
		},
		getInitialState: function () {
			return { data: [] };
		},
		componentDidMount: function () {
			this.loadCommentsFromServer();
			setInterval(this.loadCommentsFromServer, this.props.pollInterval);
		},
		render: function () {
			return (
				<div className="commentBox">
					<h1>Comments</h1>
					<CommentList data={this.state.data} />
					<CommentForm onCommentSubmit={this.handleCommentSubmit} />
				</div>
			);
		}
	});

	var CommentList = React.createClass({
		render: function () {
			var commentNodes = this.props.data.map(function (comment) {
				return (
					<Comment author={comment.author}>
						{comment.text}
					</Comment>
				);
			});

			return (
				<div className="commentList">
					{commentNodes}
				</div>
			);
		}
	});

	var CommentForm = React.createClass({
		handleSubmit: function (e) {
			e.preventDefault();

			var author = this.refs.author.getDOMNode().value.trim(),
				text = this.refs.text.getDOMNode().value.trim();

			if (!text || !author) {
				return;
			}

			this.props.onCommentSubmit({ author: author, text: text });
			this.refs.author.getDOMNode().value = '';
			this.refs.text.getDOMNode().value = '';

			return;
		},
		render: function () {
			return (
				<form role="form" className="commentForm form-inline" onSubmit={this.handleSubmit}>
					<input className="form-control" type="text" placeholder="Your name" ref="author" />
					<input className="form-control" type="text" placeholder="Say something..." ref="text" />
					<input className="btn btn-primary" type="submit" value="Post" />
				</form>
			);
		}
	});

	var Comment = React.createClass({
		render: function () {
			return (
				<div className="comment">
					<h2 className="commentAuthor">
						{this.props.author}
					</h2>
					{this.props.children}
				</div>
			);
		}
	});

	React.renderComponent(
		<CommentBox url="/comment/insert" pollInterval={2000} />,
		document.getElementById('comments')
	);
</script>
-->


